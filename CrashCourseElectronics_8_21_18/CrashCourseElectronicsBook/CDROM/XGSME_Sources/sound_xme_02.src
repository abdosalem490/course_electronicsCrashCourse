; /////////////////////////////////////////////////////////////////////////////
;
; SOUND_XME_02.SRC - ROLM BU8673 test program  for XGS Micro Edition 1.0
;
; /////////////////////////////////////////////////////////////////////////////

; Sound Design Notes
;
; BU8763 ROHM 3 channel
;
; Control signals from SX
;
; RA3 -> SCLK  - serial clock 200ns/200ns min duty cycle
; RA4 -> SDATA - 400ns	
; RA5 -> SSTB  - 200ns min
; RA6 -> Frequency Selection


; READ THIS! signal format conventions
; signal_name = (v, t) or v, t
; where v is the binary value 0 or 1, and t is the time, for example to indicate that 
; signal CLK should be 1 for 100 ns we would write:
;
; CLK = (1, 100ns) or CLK = 1,100ns
; if the time value is ommitted it simply means to set the bit to the value which can

; Sound communication algorithm:
;
; All commands are sent in a serial stream 11 bits at a time in the following format:
;
; |   Address   |                   Data                            |
; *******************************************************************
; * D10 * D9  * D8  * D7  * D6  * D5  * D4  * D3  * D2  * D1  * D0  *
; *******************************************************************
;
;
; Write Command Sequence Psuedo Code
;
; Reset System (5ms)
;
; Write Command Begin...
;
; data[] is binary vector holding 11 bits of command
;
; Start
;
;
; for bit = 10 to 0
;	begin
;	
;	SDATA = data[bit]
;	Data Setup Time, SCLK = (0, 250ns)
;	SCLK = (1, 250ns)
;	
;	next bit
; SSTB(1, 250ns)
;
; End Write Command
;
;
; /////////////////////////////////////////////////////////////////////////////

; /////////////////////////////////////////////////////////////////////////////
; Set device attributes
; /////////////////////////////////////////////////////////////////////////////

	DEVICE	SX52
	RESET	Start
	FREQ 	80_000_000 	; this is a directive to the ide only
			  	; if you want to put the XGS ME into RUN mode
			  	; you must make sure you go into the 
				; device settings and make sure that
				; HS3 is enabled, and crystal drive and
				; feedback are disabled and then re-program
				; the chip in PGM mode and then switch it to RUN

	DEVICE		OSCHS3			; High-speed external oscillator
	DEVICE		IFBD			; Crystal feedback disabled
	DEVICE		XTLBUFD			; Crystal drive disabled
	IRC_CAL IRC_FAST			; Prevent a warning

; /////////////////////////////////////////////////////////////////////////////
; Defines
; /////////////////////////////////////////////////////////////////////////////

TRIS		equ	$0f ; direction register
PLP		equ	$0e ; pull up enable/disable
LVL		equ	$0d ; cmos/ttl input select

; port defines for SX52 interface
SCLK_BIT	equ	3
SDATA_BIT	equ	4
SSTB_BIT	equ 	5

; sound chip register addresses
SND_REG_OPER	equ	$00
SND_REG_MODE	equ	$01
SND_REG_FREQ	equ	$02
SND_REG_GAIN	equ	$03
SND_REG_RES1	equ	$04
SND_REG_RES2	equ	$05
SND_REG_RES3	equ	$06
SND_REG_RES4	equ	$07

; basically the following flags and bit constants are all straight out of the 
; BU8763v.PDF file that describes the BU8763 chip

; operating flags
SND_OPER_WAVE1_ON	equ	%10000000
SND_OPER_WAVE1_OFF	equ	%00000000

SND_OPER_WAVE2_ON	equ	%01000000
SND_OPER_WAVE2_OFF	equ	%00000000

SND_OPER_WAVE3_ON	equ	%00100000
SND_OPER_WAVE3_OFF	equ	%00000000

SND_OPER_TNSEL_DTMF	equ	%00010000
SND_OPER_TNSEL_MELODY	equ	%00000000

SND_OPER_FSEL_DTMF	equ	%00010000
SND_OPER_FSEL_MELODY	equ	%00000000

SND_OPER_SLEEP_ON	equ	%00000001
SND_OPER_SLEEP_OFF	equ	%00000000

; mode flags
SND_MODE_WMODE_WAVE1	equ	%00000000
SND_MODE_WMODE_WAVE2	equ	%01000000
SND_MODE_WMODE_WAVE3	equ	%10000000

SND_MODE_FLAVOR_SQUARE	equ	%00000000
SND_MODE_FLAVOR_SINE	equ	%00100000

SND_MODE_ENVON_OFF	equ	%00000000
SND_MODE_ENVON_ON	equ	%00010000

SND_MODE_ENVM_SLOW	equ	%00000000
SND_MODE_ENVM_FAST	equ	%00001000

SND_MODE_ATTN_0_0DB	equ	%00000000
SND_MODE_ATTN_2_5B	equ	%00000001
SND_MODE_ATTN_6_0DB	equ	%00000010
SND_MODE_ATTN_8_5DB	equ	%00000011
SND_MODE_ATTN_12_0DB	equ	%00000100
SND_MODE_ATTN_14_5DB	equ	%00000101
SND_MODE_ATTN_18_0DB	equ	%00000110
SND_MODE_ATTN_24_0DB	equ	%00000111
SND_MODE_ATTN_MASK	equ	%00000111

; frequency flags
SND_FREQ_WAVE1		equ	%00000000
SND_FREQ_WAVE2		equ	%01000000
SND_FREQ_WAVE3		equ	%10000000

SND_FREQ_MASK		equ	%00011111

; gain flags
SND_GAIN_VOLUME_0DB	equ	%00000000
SND_GAIN_VOLUME_2DB	equ	%00000001
SND_GAIN_VOLUME_4DB	equ	%00000010
SND_GAIN_VOLUME_6DB	equ	%00000011
SND_GAIN_VOLUME_8DB	equ	%00000100
SND_GAIN_VOLUME_10DB	equ	%00000101
SND_GAIN_VOLUME_12DB	equ	%00000110
SND_GAIN_VOLUME_14DB	equ	%00000111
SND_GAIN_VOLUME_MASK	equ	%00001111


; /////////////////////////////////////////////////////////////////////////////
; Global variables
; /////////////////////////////////////////////////////////////////////////////
		org $20

Count1		ds	1	; delay counter
Count2		ds	1	; delay counter
Count3		ds	1	; delay counter
Counter		ds	1	; general counter

; variables so sound function can be called via a macro with parameters
screg		ds	1	; X  X  X  X  X  R2 R1 R0
scdata		ds	1 	; D7 D6 D5 D4 D3 D2 D1 D0
scfreq		ds	1 	; X X F5 F4 F3 F2 F1 F0


; /////////////////////////////////////////////////////////////////////////////
; Macros
; /////////////////////////////////////////////////////////////////////////////

; Clock delay macro
DELAY MACRO clocks

; first compute fractional remainder of 10 and delay
IF ((clocks // 10) > 0)

;	REPT (clocks // 10)
;	NOP
;	ENDR

; first 3 clock chunks6
	REPT ((clocks // 10)/3)
	JMP $ + 1
		ENDR

; now the remainder if any

	REPT ((clocks // 10)//3)
	NOP
	ENDR
ENDIF

; last compute whole multiples of 10, and delay
IF ((clocks/10) >= 1)

; delay 10*(clocks/10)
	mov counter, #(clocks/10) 	; (2)
:Loop					
	jmp $ + 1			; (3)
	jmp $ + 1			; (3)
	djnz counter, :Loop		; (4/2)

ENDIF

ENDM

; /////////////////////////////////////////////////////////////////////////////

; Sound macro, allows 

SOUND MACRO reg, data
	bank	#$20
	mov 	screg,  reg
	mov 	scdata, data
	call 	Write_Snd_Command
ENDM

; /////////////////////////////////////////////////////////////////////////////
; Data watches
; /////////////////////////////////////////////////////////////////////////////

	WATCH	screg, 8,  UBIN
	WATCH	scdata, 8, UBIN
	WATCH	Count1, 8, UDEC

; /////////////////////////////////////////////////////////////////////////////
; Subroutines
; /////////////////////////////////////////////////////////////////////////////

	org $0

; ////////////////////////////////////////////////////////////////////////////

; delays 64K clocks * n where n is sent in Count3 on entry
Delay64K_N

	clr	Count1  	;Initialize Count1, Count2
	clr	Count2		;					

:Loop		
	djnz	Count1,:loop	;Decrement until all are zero		
	djnz	Count2,:loop	;					
	djnz	Count3,:loop	;					
	RET			;then return				

; ////////////////////////////////////////////////////////////////////////////

Write_Snd_Command 

; writes a command to the BU8763, all time delays good up to 80 Mhz

; on entry , lower 3 bits of sdreg contain address
; and all 8 bits of sddata contain data
; screg  = X  X  X  X  X  R2 R1 R0
; scdata = D7 D6 D5 D4 D3 D2 D1 D0
;Control signals:
;
; RA3 -> SCLK  - serial clock 200ns/200ns min
; RA4 -> SDATA - 400ns
; RA5 -> SSTB  - 200ns min
;
; All commands are sent in a serial stream 11 bits at a time in the following format:
;
; |   Address   |                   Data                            |
; *******************************************************************
; * D10 * D9  * D8  * D7  * D6  * D5  * D4  * D3  * D2  * D1  * D0  *
; *******************************************************************
;
;
; Write Command Sequence Psuedo Code
;
; Reset System (5ms)
;
; Write Command Begin...
;
; data[] is binary vector holding 11 bits of command
;
; Start
;
;
; for bit = 10 to 0
;	begin
;	
;	SDATA = data[bit]
;	Data Setup Time, SCLK = (0, 250ns)
;	SCLK = (1, 250ns)
;	
;	next bit
;
; SSTB(1, 250ns)
;
; End Write Command
	
	mov 	Count1, #11	; 11 bits per command

:Send_Bit_Command_Loop

	clrb 	RA.SCLK_BIT	; SCLK = (0)

	; read next bit in command stream
	sb 	screg.2		; jump over if set
	jmp 	:Bit_Command_Zero

	; bit set, write 1 to SDATA
	setb 	RA.SDATA_BIT 	; SDATA = (1)

	jmp	:Bit_Command_Setup

:Bit_Command_Zero

	; bit clear, write 0 to SDATA
	clrb 	RA.SDATA_BIT 	; SDATA = (0)

:Bit_Command_Setup

	DELAY(30)		; setup time for data

	setb 	RA.SCLK_BIT	; SCLK = (1)

	DELAY(30)		; wait 200ns+

	; shift next bit into position
	; shift data thru carry, shift carry into address
	; shift address over and next bit into position 2 for reading
	rl 	scdata
	rl 	screg
		
	djnz 	Count1, :Send_Bit_Command_Loop

	; strobe the command in
	mov 	RA, #0 		; clear RA first
	DELAY(30)		; wait 200ns+
	setb 	RA.SSTB_BIT 	; strobe BU673 SSTB line
	DELAY(30)		; wait 200ns
	clrb 	RA.SSTB_BIT	; zero BU673 SSTB line

	ret

; /////////////////////////////////////////////////////////////////////////////
;  Begin program after restart
; /////////////////////////////////////////////////////////////////////////////

; this demo program plays chords thru the BU8763 at a rate of up to 80 Mhz (stand alone speed)
; each chord is composed of all 3 channels on with various frequency offsets and settings
; try experimenting with the functions, the most important function call is the Write_Snd_Command()
; it does all the work

	org	$80
Start		

	bank	#$20

Main
	
	mode 	TRIS		; set the mode select to output direction
	mov	RA, #%00000000	; Set port A output latch to zero
	mov	!RA,#%00000000	; Set port A to output direction

Restart
	mov 	scfreq, #0
Loop
	mov 	screg,  #SND_REG_OPER
	mov 	scdata, #(SND_OPER_WAVE1_ON | SND_OPER_WAVE2_ON | SND_OPER_WAVE3_ON | SND_OPER_TNSEL_MELODY | SND_OPER_FSEL_MELODY | SND_OPER_SLEEP_OFF)
	call 	Write_Snd_Command

	mov 	screg,  #SND_REG_MODE 
        mov 	scdata, #(SND_MODE_WMODE_WAVE1 | SND_MODE_FLAVOR_SQUARE | SND_MODE_ENVON_ON | SND_MODE_ENVM_SLOW | SND_MODE_ATTN_0_0DB)
	call 	Write_Snd_Command

	mov 	screg,  #SND_REG_MODE 
        mov 	scdata, #(SND_MODE_WMODE_WAVE2 | SND_MODE_FLAVOR_SQUARE  | SND_MODE_ENVON_ON | SND_MODE_ENVM_FAST | SND_MODE_ATTN_0_0DB)
	call 	Write_Snd_Command

	mov 	screg,  #SND_REG_MODE 
        mov 	scdata, #(SND_MODE_WMODE_WAVE3 | SND_MODE_FLAVOR_SQUARE  | SND_MODE_ENVON_ON | SND_MODE_ENVM_FAST | SND_MODE_ATTN_0_0DB)
	call 	Write_Snd_Command

	mov 	screg,  #SND_REG_FREQ
	mov 	scdata, #(SND_FREQ_WAVE1)
	or	scdata, scfreq
	call 	Write_Snd_Command

	mov 	screg,  #SND_REG_FREQ
	mov 	scdata, #(SND_FREQ_WAVE2)
	or	scdata, scfreq
	add 	scdata, #1
	call 	Write_Snd_Command

	mov 	screg,  #SND_REG_FREQ
	mov 	scdata, #(SND_FREQ_WAVE3)
	or	scdata, scfreq
	add	scdata, #2
	call 	Write_Snd_Command

	mov 	screg,  #SND_REG_GAIN 
	mov 	scdata, #(SND_GAIN_VOLUME_0DB)
	call 	Write_Snd_Command

	inc	scfreq

	mov 	Count3, #50
	call 	Delay64K_N		

	cjb	scfreq, #61, Loop

	jmp	Restart
